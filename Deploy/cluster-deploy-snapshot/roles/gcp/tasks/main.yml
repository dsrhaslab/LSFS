---

- name: Create boot disk
  when: from_snapshot is not defined or from_snapshot|bool == false
  gcp_compute_disk:
    name: "disk-{{ type_of_component }}-{{ item }}"
    size_gb: "{{ boot_disk_size }}"
    source_image: "{{ source_image }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    type: "{{ boot_disk_type }}"
    state: present
  register: disk
  with_sequence: start=1 end="{{ nr_of_machines }}"

- name: Create boot disk from snapshot
  when: from_snapshot is defined and from_snapshot|bool == true
  shell: >
    /snap/bin/gcloud compute disks create disk-{{ type_of_component }}-{{ item }} --size {{ boot_disk_size }}GB --image projects/{{ gcp_project }}/global/images/image-{{ type_of_component }}-v{{ image_version }} --type {{ boot_disk_type }} --zone {{ gcp_zone }}
  with_sequence: start=1 end="{{ nr_of_machines }}"

- name: Create a weaker instance with external ip
  when: (gpu_type is not defined or tensorflow_test == False) and ( external_ip is not defined or external_ip|bool == true)
  gcp_compute_instance:
    name: "instance-{{ type_of_component }}-{{ '%04d' | format(item | int) }}"
    machine_type: "{{ gcp_machine_type }}"
    can_ip_forward: true
    service_accounts:
      - scopes: 
         - "{{ gcp_account_scope }}"
        email: "{{ gcp_account_email }}"
    disks:
      - auto_delete: true
        boot: true
        source:
          selfLink: "projects/{{ gcp_project }}/zones/{{ gcp_zone }}/disks/disk-{{ type_of_component }}-{{ item }}"
        #source: "{{ disk.results[item | int - 1] }}"
    metadata:
      startup-script: |
        #!/bin/bash
        ls
    tags:
      items: "{{ tags }}"
    network_interfaces:
      - network:
          selfLink: "projects/{{ gcp_project }}/global/networks/{{ gcp_network_name }}"
        subnetwork:
          selfLink: "projects/{{ gcp_project }}/regions/{{ gcp_region }}/subnetworks/{{ gcp_subnet_name }}"
        access_configs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
    scheduling:
      preemptible: no
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present
  register: weaker_instance_with_external_ip
  with_sequence: start=1 end="{{ nr_of_machines }}" format=%d

- name: Create a weaker instance without external ip
  when: (gpu_type is not defined or tensorflow_test == False) and external_ip is defined and external_ip|bool == false
  gcp_compute_instance:
    name: "instance-{{ type_of_component }}-{{ '%04d' | format(item | int) }}"
    machine_type: "{{ gcp_machine_type }}"
    can_ip_forward: true
    service_accounts:
      - scopes: 
         - "{{ gcp_account_scope }}"
        email: "{{ gcp_account_email }}"
    disks:
      - auto_delete: true
        boot: true
        source:
          selfLink: "projects/{{ gcp_project }}/zones/{{ gcp_zone }}/disks/disk-{{ type_of_component }}-{{ item }}"
        #source: "{{ disk.results[item | int - 1] }}"
    metadata:
      startup-script: |
        #!/bin/bash
        ls
    tags:
      items: "{{ tags }}"
    network_interfaces:
      - network:
          selfLink: "projects/{{ gcp_project }}/global/networks/{{ gcp_network_name }}"
        subnetwork:
          selfLink: "projects/{{ gcp_project }}/regions/{{ gcp_region }}/subnetworks/{{ gcp_subnet_name }}"
    scheduling:
      preemptible: no
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present
  register: weaker_instance_without_external_ip
  with_sequence: start=1 end="{{ nr_of_machines }}" format=%d

- name: Create a stronger instance
  when: (gpu_type is defined and tensorflow_test == True)
  gcp_compute_instance:
    name: "instance-{{ type_of_component }}-{{ '%04d' | format(item | int) }}"
    machine_type: "{{ gcp_machine_type }}"
    can_ip_forward: true
    service_accounts:
      - scopes: 
         - "{{ gcp_account_scope }}"
        email: "{{ gcp_account_email }}"
    disks:
      - auto_delete: true
        boot: true
        source:
          selfLink: "projects/{{ gcp_project }}/zones/{{ gcp_zone }}/disks/disk-{{ type_of_component }}-{{ item }}"
        #source: "{{ disk.results[item | int - 1] }}"
      # - auto_delete: true
      #   boot: false
      #   initialize_params:
      #     disk_type: "{{ ssd_disk_type }}"
      #   interface: "{{ ssd_disk_interface }}"
      #   type: "SCRATCH" # "PERSISTENT"
    guest_accelerators:
      - accelerator_count: 1
        accelerator_type: "{{ gpu_type }}"
    metadata:
      startup-script: |
        #!/bin/bash
        cd /
        # sudo mkfs.ext4 -F /dev/nvme0n1
        # sudo mkdir -p /mnt/disks/ssd
        # sudo mount /dev/nvme0n1 /mnt/disks/ssd
        # sudo chmod a+w /mnt/disks/ssd/
        # sudo rsync -avHAX /home/ /mnt/disks/ssd/
        # sudo rm -rf /home/*
        # sudo umount /mnt/disks/ssd
        # sudo mount /dev/nvme0n1 /home
        # sudo rm -rf /mnt/disks/ssd/
    tags:
      items: "{{ tags }}"
    network_interfaces:
      - network:
          selfLink: "projects/{{ gcp_project }}/global/networks/{{ gcp_network_name }}"
        subnetwork:
          selfLink: "projects/{{ gcp_project }}/regions/{{ gcp_region }}/subnetworks/{{ gcp_subnet_name }}"
        access_configs:
        - name: External NAT
#          nat_ip: "{{ address.results[item- 1] }}"
          type: ONE_TO_ONE_NAT
    scheduling:
      preemptible: false
      on_host_maintenance: "terminate"
      automatic_restart: true
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present
  register: stronger_instance
  with_sequence: start=1 end="{{ nr_of_machines }}" format=%d

- name: Wait until the initial directory ssd mount is absent before continuing
  when: (ssd_disk_type is defined and tensorflow_test == True)
  wait_for:
    path: /mnt/disks/ssd/
    state: absent

- debug:
    var: weaker_instance_without_external_ip.results[0].networkInterfaces[0].networkIP

- name: Add weaker instance without external ip hosts to in memory inventory
  when: (gpu_type is not defined or tensorflow_test == False) and external_ip is defined and external_ip|bool == false
  add_host:
    name: "{{ item.networkInterfaces[0].networkIP }}"
    groups: "{{ item.tags['items'] | join(',') }}"
    hostname_alias: "{{ item.name }}" 
  loop: "{{ weaker_instance_without_external_ip.results }}"

- name: Add weaker instance with external ip hosts to in memory inventory
  when: (gpu_type is not defined or tensorflow_test == False) and ( external_ip is not defined or external_ip|bool == true)
  add_host:
    name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    groups: "{{ item.tags['items'] | join(',') }}"
    hostname_alias: "{{ item.name }}" 
  loop: "{{ weaker_instance_with_external_ip.results }}"

- name: Add stronger instance hosts to in memory inventory
  when: (gpu_type is defined and tensorflow_test == True)
  add_host:
    name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
    groups: "{{ item.tags['items'] | join(',') }}"
    hostname_alias: "{{ item.name }}" 
  loop: "{{ stronger_instance.results }}"

- name: Wait for instances to respond
  wait_for:
    host: "{{ item }}"
    port: 22
  loop: "{{ groups[ type_of_component ] }}"
