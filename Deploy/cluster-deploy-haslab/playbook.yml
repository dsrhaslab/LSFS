---

# - name: Creating Kubernetes Master Instance
#   hosts: localhost
#   connection: local
#   gather_facts: no
#   roles:
#     - role: gcp
#       vars:
#         gcp_zone: us-east1-b
#         gcp_region: us-east1
#         gcp_project: dflasks
#         gcp_cred_kind: serviceaccount
#         gcp_cred_file: credentials.json
#         gcp_account_email: 'lsfs-deploy@dflasks.iam.gserviceaccount.com'
#         gcp_account_scope: 'https://www.googleapis.com/auth/cloud-platform'
#         source_image: projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20200414
#         nr_of_machines: 1
#         boot_disk_size: "{{ kubernetes_master_boot_disk_size }}"
#         gcp_machine_type: "{{ kubernetes_master_machine_type }}"
#         type_of_component: "{{ kubernetes_master_lsfs_component }}"
#         tags: [master, kube-cluster]

# - name: Creating LSFS bootstrapper Instance
#   hosts: localhost
#   connection: local
#   gather_facts: no
#   roles:
#     - role: gcp
#       vars:
#         gcp_zone: us-east1-b
#         gcp_region: us-east1
#         gcp_project: dflasks
#         gcp_cred_kind: serviceaccount
#         gcp_cred_file: credentials.json
#         gcp_account_email: 'lsfs-deploy@dflasks.iam.gserviceaccount.com'
#         gcp_account_scope: 'https://www.googleapis.com/auth/cloud-platform'
#         source_image: projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20200414
#         nr_of_machines: 1
#         boot_disk_size: "{{ bootstrapper_boot_disk_size }}"
#         gcp_machine_type: "{{ bootstrapper_machine_type }}"
#         type_of_component: "{{ bootstrapper_lsfs_component }}"
#         tags: [bootstrapper, kube-cluster]

# - name: Creating LSFS peers Instances
#   hosts: localhost
#   connection: local
#   gather_facts: no
#   roles:
#     - role: gcp
#       vars:
#         gcp_zone: us-east1-b
#         gcp_region: us-east1
#         gcp_project: dflasks
#         gcp_cred_kind: serviceaccount
#         gcp_cred_file: credentials.json
#         gcp_account_email: 'lsfs-deploy@dflasks.iam.gserviceaccount.com'
#         gcp_account_scope: 'https://www.googleapis.com/auth/cloud-platform'
#         source_image: projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20200414
#         nr_of_machines: "{{ nr_of_peers }}"
#         boot_disk_size: "{{ peer_boot_disk_size }}"
#         gcp_machine_type: "{{ peer_machine_type }}"
#         type_of_component: "{{ peer_lsfs_component }}"
#         tags: [peer, kube-cluster]

# - name: Creating Lsfs Client Node
#   hosts: localhost
#   connection: local
#   gather_facts: no
#   roles:
#     - role: gcp
#       vars:
#         gcp_zone: us-east1-d
#         gcp_region: us-east1
#         gcp_project: dflasks
#         gcp_cred_kind: serviceaccount
#         gcp_cred_file: credentials.json
#         gcp_account_email: 'lsfs-deploy@dflasks.iam.gserviceaccount.com'
#         gcp_account_scope: 'https://www.googleapis.com/auth/cloud-platform'
#         source_image: projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20200414
#         nr_of_machines: "{{ nr_of_client_nodes }}"
#         boot_disk_size: "{{ client_boot_disk_size }}"
# #        ssd_disk_type: "{{ client_ssd_disk_type }}"
# #        ssd_disk_interface: "{{ client_ssd_disk_interface }}"
# #        gpu_type: "{{ client_gpu_type }}"
#         gcp_machine_type: "{{ client_machine_type }}"
#         type_of_component: "{{ client_lsfs_component }}"
#         tags: [client, kube-cluster]

# - name: Store known hosts of 'all' the hosts in the inventory file
#   hosts: localhost
#   connection: local

#   vars:
#     ssh_known_hosts_command: "ssh-keyscan -T 10"
#     ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
#     ssh_known_hosts: "{{ groups['all'] }}"

#   tasks:

#   - name: For each host, remove entry on known_hosts
#     shell: "ssh-keygen -R {{ item }}"
#     with_items: "{{ ssh_known_hosts }}"
#     ignore_errors: yes

#   - name: For each host, scan for its ssh public key
#     shell: "ssh-keyscan -t rsa {{ item }}"
#     with_items: "{{ ssh_known_hosts }}"
#     register: ssh_known_host_results
#     ignore_errors: yes

#   # - name: For each host, scan for its ssh public key
#   #   shell: "ssh-keyscan {{ item }},`dig +short {{ item }}`"
#   #   with_items: "{{ ssh_known_hosts }}"
#   #   register: ssh_known_host_results
#   #   ignore_errors: yes

#   - name: Add/update the public key in the '{{ ssh_known_hosts_file }}'
#     known_hosts:
#       name: "{{ item.item }}"
#       key: "{{ item.stdout }}"
#       path: "{{ ssh_known_hosts_file }}"
#     with_items: "{{ ssh_known_host_results.results }}"  

- name: Setup Docker on Cluster nodes
  hosts: master #kube-cluster
  gather_facts: yes
  become: yes
  roles:

    - { role: docker, tags: docker }

- name: Setup K8s master, cluster and network creation
  hosts: master
  gather_facts: yes
  become: yes
  roles:
    - { role: kubernetes/master, tags: master }
    - { role: cni, tags: cni }

- name: Joining Bootstrapper, Peer and Client Instances to K8s cluster
  hosts: [bootstrapper, peer, client]
  gather_facts: yes
  become: yes
  roles:
    - { role: kubernetes/node, tags: node }

# - name: Extra Cluster Configuration
#   hosts: master
#   gather_facts: yes
#   become: yes
#   tasks:
#     - name: Adding labels to kubernetes bootstrapper node
#       command: |
#         kubectl --kubeconfig={{ kubeadmin_config }} \
#             label nodes instance-{{ bootstrapper_lsfs_component }}-{{ '%04d' | format(item | int) }} lsfs-component={{ bootstrapper_lsfs_component }}
#       register: create_result_bootstrapper_node
#       until: create_result_bootstrapper_node.rc == 0
#       retries: 5
#       delay: 2
#       ignore_errors: true
#       with_sequence: start=1 end=1 format=%d

#     - name: Adding labels to kubernetes data nodes
#       command: |
#         kubectl --kubeconfig={{ kubeadmin_config }} \
#             label nodes instance-{{ peer_lsfs_component }}-{{ '%04d' | format(item | int) }} lsfs-component={{ peer_lsfs_component }}
#       register: create_result_data_nodes
#       until: create_result_data_nodes.rc == 0
#       retries: 5
#       delay: 2
#       ignore_errors: true
#       with_sequence: start=1 end="{{ nr_of_peers }}" format=%d

#     - name: Adding labels to kubernetes client nodes
#       command: |
#         kubectl --kubeconfig={{ kubeadmin_config }} \
#             label nodes instance-{{ client_lsfs_component }}-{{ '%04d' | format(item | int) }} lsfs-component={{ client_lsfs_component }}
#       register: create_result_client_nodes
#       until: create_result_client_nodes.rc == 0
#       retries: 5
#       delay: 2
#       ignore_errors: true
#       with_sequence: start=1 end="{{ nr_of_client_nodes }}" format=%d

- name: Extra Cluster Configuration
  hosts: master
  gather_facts: yes
  become: yes
  tasks:
    - name: Adding labels to kubernetes bootstrapper node
      command: |
        kubectl --kubeconfig={{ kubeadmin_config }} \
            label nodes sembene lsfs-component=node
      register: create_result_bootstrapper_node
      until: create_result_bootstrapper_node.rc == 0
      retries: 5
      delay: 2
      ignore_errors: true

    - name: Install openshift python module
      pip:
        name: openshift

    - name: Create k8s lsfs namespace
      k8s:
        kubeconfig: /home/gsd/.kube/config
        name: lsfs
        api_version: v1
        kind: Namespace
        state: present

- hosts: kube-cluster
  gather_facts: yes
  become: yes
  roles:
    - role: image-pull

- name: creating mount directory ("become:no" in order to not create on root namespace)
  hosts: client
  gather_facts: yes
  become: no
  roles:
    - { role: lsfs-client/setup, volume_mount: "/home/{{ ansible_user_id }}/lsfs-mount" }

- hosts: client
  gather_facts: yes
  become: yes
  roles:
    - role: lsfs-client/filebench
    - role: lsfs-client/fuse

- name: Saving In-Memory Inventory to File
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - template:
        src: ansible-hosts.j2
        dest: ansible_hosts

