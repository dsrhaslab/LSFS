---

- hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - role: gcp
      vars:
        gcp_zone: us-east1-b
        gcp_region: us-east1
        gcp_project: dflasks
        gcp_cred_kind: serviceaccount
        gcp_cred_file: credentials.json
        gcp_account_email: 'lsfs-deploy@dflasks.iam.gserviceaccount.com'
        gcp_account_scope: 'https://www.googleapis.com/auth/cloud-platform'
        source_image: projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20200414
        disk_size: 12
        disks:
          - disk-01
          - disk-02
        addresses:
          - addr-01
          - addr-02
        instances:
                - { index: 1,tags: master, gcp_machine_type: n1-standard-2 }
                - { index: 2, tags: workers, gcp_machine_type: n1-standard-1 }

- name: install python2 on ubuntu 18.04 instances
  hosts: [master, workers]
  gather_facts: false
  tasks:
    - name: run apt-get update and install python
      raw: "{{ item }}"
      loop:
        - sudo apt-get update
        - sudo apt-get -y install python
      become: true

- hosts: [master, workers]
  become: yes
  roles:
    - { role: users, payload: users.yml }

# - hosts: elasticsearch
#   become: yes
#   roles:
#      - docker
#      - elasticsearch

# - hosts: database
#   become: yes
#   roles:
#     - role: keepalived
#     - { role: database,
#         username: 'blog',
#         password: "{{ lookup('passwordstore', 'sdb-ghost/db_user') }}",
#         dbname: 'ghost_db'
#       } 
#     - { role: db-replication,
#         username: 'root', #'blog',
#         password: "{{ lookup('passwordstore', 'sdb-ghost/db_root') }}",  #"{{ lookup('passwordstore', 'sdb-ghost/db_user') }}",
#       }
#     - { role: beats,
#         elastic_host: "{{ hostvars[groups['elasticsearch'][0]]['ansible_%s' | format(ansible_interfaces[0])].ipv4.address }}",
#         modules: ["mysql"],
#         log_files: "/var/log/mysql/*.log"
#       }

# - hosts: app
#   become: yes
#   roles:
#     - role: docker
#     - { role: app-ghost,
#         username: 'blog',
#         dbname: 'ghost_db'
#       }

# - hosts: nginx
#   become: yes
#   roles:
#     - {
#         role: web-nginx,
#         template: ghost.conf
#       }
#     - { role: beats,
#         elastic_host: "{{ hostvars[groups['elasticsearch'][0]]['ansible_%s' | format(ansible_interfaces[0])].ipv4.address }}",
#         modules: ["nginx", "system"],
#         log_files: "/var/log/nginx/*.log"
#       }

# - hosts: haproxy
#   become: yes
#   roles:
#     - { role: haproxy,
#         iface: '{{ ansible_default_ipv4.interface }}',
#         httpd_port: 80,
#         mode: http,
#         balance: roundrobin,
#         listenport: 8888,
#         daemonname: myapphaproxy
#       }
#     - { role: beats,
#         elastic_host: "{{ hostvars[groups['elasticsearch'][0]]['ansible_%s' | format(ansible_interfaces[0])].ipv4.address }}",
#         modules: ["haproxy", "system"]
#       }

# - hosts: jmeter
#   become: yes
#   roles:
#     - { role: jmeter,
#         sampler_domain: "{{ hostvars[groups['haproxy'][0]]['ansible_%s' | format(ansible_interfaces[0])].ipv4.address }}"
#       }
