 
  - name: Calculate peers to kill
    hosts: localhost

    tasks: 

      - name: Execute python script to calculate which peers to reset
        shell: |
                python3 peers_2_kill.py {{ nr_peers }} {{ nr_groups }} {{ nr_peers_to_kill }}
        register: peers_to_kill_res
      
      - name: Save var in localhost
        set_fact:
            peers_to_kill: "{{ peers_to_kill_res.stdout_lines }}"
        delegate_to: localhost
        delegate_facts: true

 
 
 # Play3 - Shutdown pods
  - name: Shutdown running pods
    hosts: masters

    tasks: 

      - name: Concat peers name to be killed
        vars: 
            data: "{{ item.split(' ') }}"
        set_fact:
            to_delete: "{{ to_delete | default('') + ' ' + data.0 }}"
        with_items:
          - "{{ hostvars['localhost']['peers_to_kill'] }}"

      - name: Delete selected pods 
        shell: | 
                kubectl delete pods -n lsfs {{ to_delete }}


  - name: Clean/stop selected instances
    hosts: localhost
    strategy: free

    vars: 
        remote_dir: /home/{{ ansible_user }}/{{ remote_com_directory }}

    tasks: 

      - name: Clean selected instances database 
        vars: 
          data: "{{ item.split(' ') }}" 
        shell: | 
                sudo rm -r /{{ remote_dir }}/levelDB/*
        delegate_to: "{{ data.0 }}"   # {{ hostvars['peer50'].ansible_host }}
        with_items:
          - "{{ hostvars['localhost']['peers_to_kill'] }}"

      - name: Reboot selected instances 
        vars: 
          data: "{{ item.split(' ') }}" 
        shell: | 
                sudo reboot
        delegate_to: "{{ data.0 }}"   # {{ hostvars['peer50'].ansible_host }}
        with_items:
          - "{{ hostvars['localhost']['peers_to_kill'] }}"
        async: 45
        poll: 0
        



  
#  Play1 - Kubernets Cluster initialization

# - name: Kubernetes retrieve join token
#   hosts: masters

#   tasks:

#     - name: Generate join token
#       shell: |
#               sudo kubeadm token create --print-join-command
#       register: cluster_join_cmd


#     - name: Setting Join command as fact
#       set_fact:
#         cluster_join: "{{ cluster_join_cmd.stdout }}"
#       delegate_to: localhost
#       delegate_facts: true


# - name: Kubernetes init cluster in rebooted instances
#   hosts: localhost

#   tasks:

#     - name: Run join command in workers
#       vars: 
#         data: "{{ item.split(' ') }}"
#       shell: |
#               sudo {{ hostvars['localhost']['cluster_join'] }}
#       delegate_to: "{{ data.0 }}"
#       with_items:
#         - "{{ hostvars['localhost']['peers_to_kill'] }}"


  - name: Wait for instances reboot
    hosts: localhost
    tasks:
      - name: Pause for 10 minutes before  instances reboot 
        pause:
          seconds: 600

    
  - name: Creation of Peer Pods
    hosts: masters
    roles:
      - { role: peers, bootstrapper_ip: "{{ boot_ip }}", to_kill: "{{ peers_to_kill }}", shared_dir: "/home/{{ hosts_user }}/{{ remote_com_directory }}"}
    vars:
      boot_ip: "{{ lookup('file', '../bootstrapper_host') }}"
      peers_to_kill: "{{ hostvars['localhost']['peers_to_kill'] }}"



  - name: Wait until peers creation
    hosts: masters
    tasks:
      - name: Pause for 1 minutes until all peers are created
        pause:
          minutes: 1




  